"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCodechatPath = getCodechatPath;
exports.createCodechatFile = createCodechatFile;
exports.appendMessageToFile = appendMessageToFile;
exports.readFileContent = readFileContent;
exports.ensureDirectory = ensureDirectory;
exports.isValidRoomSlug = isValidRoomSlug;
exports.getCurrentRoomFromCodechat = getCurrentRoomFromCodechat;
exports.getCodechatFiles = getCodechatFiles;
exports.clearInputArea = clearInputArea;
exports.createCommandHelpFile = createCommandHelpFile;
const fs = __importStar(require("fs-extra"));
const path = __importStar(require("path"));
function getCodechatPath(roomSlug, workingDir = process.cwd()) {
    return path.join(workingDir, `${roomSlug}.codechat`);
}
async function createCodechatFile(filePath, roomSlug, username) {
    const initialContent = `================================================================================
 File: ${roomSlug}.codechat
================================================================================

 Room: ${roomSlug}
 User: ${username}
 Max Messages: 7 (最新メッセージのみ表示)

================================================================================

💭 チャットを開始しましょう！

================================================================================


------------------------------------------------------------------------------>
メッセージを上の線上に書き

================================================================================
`;
    await fs.writeFile(filePath, initialContent, 'utf8');
    // コマンドヘルプファイルを作成
    await createCommandHelpFile(path.dirname(filePath), roomSlug);
}
async function appendMessageToFile(filePath, message) {
    try {
        // ファイルの内容を読み取り
        const currentContent = await fs.readFile(filePath, 'utf8');
        // 新しい形式の境界を特定
        const headerEnd = '================================================================================';
        const inputLineStart = '------------------------------------------------------------------------------>';
        const firstHeaderIndex = currentContent.indexOf(headerEnd);
        const secondHeaderIndex = currentContent.indexOf(headerEnd, firstHeaderIndex + 1);
        const thirdHeaderIndex = currentContent.indexOf(headerEnd, secondHeaderIndex + 1);
        const inputLineIndex = currentContent.lastIndexOf(inputLineStart);
        if (firstHeaderIndex !== -1 && secondHeaderIndex !== -1 && thirdHeaderIndex !== -1 && inputLineIndex !== -1) {
            // ヘッダー部分
            const headerPart = currentContent.substring(0, secondHeaderIndex + headerEnd.length);
            // 現在のメッセージ部分
            const messagePart = currentContent.substring(secondHeaderIndex + headerEnd.length, thirdHeaderIndex);
            // フッター部分（入力エリア以降）
            const footerStart = currentContent.substring(thirdHeaderIndex);
            // 既存のメッセージを抽出
            const existingMessages = extractMessagesFromContent(messagePart);
            // 新しいメッセージを追加
            existingMessages.push(message);
            // メッセージ数を7個に制限
            const limitedMessages = existingMessages.slice(-7);
            // 新しいメッセージ部分を構築
            const newMessagePart = buildMessageContent(limitedMessages);
            // ファイル全体を再構築
            const newContent = headerPart + '\n' + newMessagePart + '\n' + footerStart;
            await fs.writeFile(filePath, newContent, 'utf8');
        }
        else {
            console.error('ファイル形式が認識できません');
        }
    }
    catch (error) {
        console.error('ファイル書き込みエラー:', error);
    }
}
function extractMessagesFromContent(messageSection) {
    const messages = [];
    const lines = messageSection.split('\n');
    let currentMessage = '';
    let collectingMessage = false;
    for (const line of lines) {
        // メッセージの開始を検出（[時刻] で始まる行）
        if (line.match(/^\[[\d:]+\]/)) {
            // 前のメッセージを保存
            if (currentMessage.trim()) {
                messages.push(currentMessage.trim());
            }
            currentMessage = line;
            collectingMessage = true;
        }
        else if (collectingMessage && line.trim() !== '') {
            // メッセージの続きを追加
            currentMessage += '\n' + line;
        }
        else if (collectingMessage && line.trim() === '') {
            // 空行でメッセージ終了
            if (currentMessage.trim()) {
                messages.push(currentMessage.trim());
            }
            currentMessage = '';
            collectingMessage = false;
        }
    }
    // 最後のメッセージを保存
    if (currentMessage.trim()) {
        messages.push(currentMessage.trim());
    }
    return messages.filter(msg => msg.length > 0 && !msg.includes('💭 チャットを開始しましょう！'));
}
function extractExistingMessages(historySection) {
    const messages = [];
    const lines = historySection.split('\n');
    let currentMessage = '';
    let insideMessage = false;
    for (const line of lines) {
        // メッセージの開始を検出（┌─ で始まる行）
        if (line.includes('┌─') && !line.includes('チャット履歴')) {
            if (currentMessage.trim()) {
                messages.push(currentMessage.trim());
            }
            currentMessage = line + '\n';
            insideMessage = true;
        }
        else if (insideMessage) {
            currentMessage += line + '\n';
            // メッセージの終了を検出（└─ で始まる行）
            if (line.includes('└─')) {
                messages.push(currentMessage.trim());
                currentMessage = '';
                insideMessage = false;
            }
        }
    }
    return messages.filter(msg => msg.length > 0 && !msg.includes('💭 チャットを開始しましょう！'));
}
function buildMessageContent(messages) {
    if (messages.length === 0) {
        return '💭 チャットを開始しましょう！';
    }
    // 7つ以上のメッセージがある場合は、古いメッセージ削除の表示を追加
    let content = '';
    if (messages.length >= 7) {
        content += '▲ 古いメッセージは自動削除されます（7つまで表示）\n\n';
    }
    // メッセージを追加
    for (let i = 0; i < messages.length; i++) {
        content += messages[i];
        if (i < messages.length - 1) {
            content += '\n';
        }
    }
    return content;
}
function buildChatHistory(messages) {
    const chatHistoryStart = '╔═ チャット履歴 ═════════════════════════════════════════════════════════════╗';
    const chatHistoryEnd = '╚═══════════════════════════════════════════════════════════════════════════╝';
    let historyContent = chatHistoryStart + '\n';
    if (messages.length === 0) {
        // メッセージがない場合は初期状態
        for (let i = 0; i < 18; i++) {
            if (i === 9) {
                historyContent += '║                          💭 チャットを開始しましょう！                    ║\n';
            }
            else {
                historyContent += '║                                                                           ║\n';
            }
        }
    }
    else {
        // メッセージがある場合は表示
        let lineCount = 0;
        const maxLines = 18;
        for (const message of messages) {
            const messageLines = message.split('\n');
            // メッセージの前に空行を追加
            if (lineCount > 0 && lineCount < maxLines) {
                historyContent += '║                                                                           ║\n';
                lineCount++;
            }
            // メッセージを追加
            for (const line of messageLines) {
                if (lineCount < maxLines) {
                    historyContent += line + '\n';
                    lineCount++;
                }
            }
        }
        // 残りの行を空行で埋める
        while (lineCount < maxLines) {
            historyContent += '║                                                                           ║\n';
            lineCount++;
        }
    }
    historyContent += chatHistoryEnd;
    return historyContent;
}
async function readFileContent(filePath) {
    try {
        return await fs.readFile(filePath, 'utf8');
    }
    catch (error) {
        console.error('ファイル読み取りエラー:', error);
        return '';
    }
}
async function ensureDirectory(dirPath) {
    await fs.ensureDir(dirPath);
}
function isValidRoomSlug(slug) {
    return /^[a-zA-Z0-9-_]+$/.test(slug);
}
async function getCurrentRoomFromCodechat() {
    try {
        const currentDir = process.cwd();
        const files = await fs.readdir(currentDir);
        // .codechatファイルを探す
        const codechatFiles = files.filter(file => file.endsWith('.codechat'));
        if (codechatFiles.length === 0) {
            return null;
        }
        // 最初の.codechatファイルからルーム名を抽出
        const codechatFile = codechatFiles[0];
        const roomSlug = codechatFile.replace('.codechat', '');
        return roomSlug;
    }
    catch (error) {
        console.error('ルーム情報取得エラー:', error);
        return null;
    }
}
async function getCodechatFiles() {
    try {
        const currentDir = process.cwd();
        const files = await fs.readdir(currentDir);
        return files.filter(file => file.endsWith('.codechat'));
    }
    catch (error) {
        console.error('ファイル一覧取得エラー:', error);
        return [];
    }
}
async function clearInputArea(filePath) {
    try {
        const currentContent = await fs.readFile(filePath, 'utf8');
        // 入力線の上の部分をクリア
        const inputLineStart = '------------------------------------------------------------------------------>';
        const inputLineIndex = currentContent.lastIndexOf(inputLineStart);
        if (inputLineIndex !== -1) {
            // 入力線より前の部分を取得
            const beforeInputLine = currentContent.substring(0, inputLineIndex);
            // 最後の区切り線（================）を見つける
            const lastSeparator = '================================================================================';
            const lastSeparatorIndex = beforeInputLine.lastIndexOf(lastSeparator);
            if (lastSeparatorIndex !== -1) {
                const beforeMessages = beforeInputLine.substring(0, lastSeparatorIndex + lastSeparator.length);
                const inputArea = currentContent.substring(inputLineIndex);
                // 入力エリアをクリア（空行2つ + 入力線以降）
                const cleanContent = beforeMessages + '\n\n\n' + inputArea;
                await fs.writeFile(filePath, cleanContent, 'utf8');
            }
        }
    }
    catch (error) {
        console.error('入力エリアクリアエラー:', error);
    }
}
async function createCommandHelpFile(dirPath, roomSlug) {
    const helpFilePath = path.join(dirPath, `${roomSlug}-commands.kawazu`);
    const helpContent = `================================================================================
 Kawazu コマンドリファレンス - ${roomSlug}
================================================================================

📋 基本操作:
  • メッセージ送信: .codechatファイルで編集後 Ctrl+S
  • チャット終了: Ctrl+C

🔧 利用可能なコマンド:

📁 ファイル共有:
  kawazu share /path/to/file.js
  └─ ファイルを他の参加者と共有（承認が必要）

👤 ユーザー情報:
  kawazu profile ユーザー名
  └─ 指定ユーザーのプロフィールを表示

🏠 ルーム操作:
  kawazu list
  └─ 参加可能なルーム一覧を表示
  
  kawazu create "新しいルーム名"
  └─ 新しいルームを作成

🔐 認証・プラン:
  kawazu login
  └─ Webアプリアカウントでログイン
  
  kawazu logout
  └─ ログアウト
  
  kawazu whoami
  └─ 現在のユーザー情報を表示
  
  kawazu plan
  └─ サブスクリプションプラン情報を確認

💬 メッセージ形式:
  • プレーンテキスト
  • コードブロック: \`\`\`言語名 で開始
  • 絵文字対応

📊 制限事項:
  • メッセージ履歴: 7つまで（古いものは自動削除）
  • ファイル共有: プランに応じた容量制限
  • ルーム作成数: プランに応じた制限

================================================================================
`;
    await fs.writeFile(helpFilePath, helpContent, 'utf8');
    console.log(`📖 コマンドヘルプファイルを作成しました: ${roomSlug}-commands.kawazu`);
}
